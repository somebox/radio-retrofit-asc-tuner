external_components:
  - source:
      type: local
      path: ../components

esphome:
  name: retro-radio
  friendly_name: Retro Radio Bridge

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

uart:
  id: radio_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200

# Radio controller component - handles all state synchronization automatically
radio_controller:
  id: bridge
  uart_id: radio_bus

# Expose radio mode as a select entity
select:
  - platform: template
    name: "Radio Mode"
    id: radio_mode_select
    options:
      - "radio"
      - "playlist"
      - "clock"
      - "animation"
    initial_option: "radio"
    set_action:
      - lambda: |-
          // Simple mapping to numeric mode
          int mode = 0;
          if (x == "radio") mode = 0;
          else if (x == "playlist") mode = 1;
          else if (x == "clock") mode = 2;
          else if (x == "animation") mode = 3;
          
          id(bridge).send_mode_command(mode, x);
    on_value:
      # Register this select with the bridge for automatic updates
      - lambda: id(bridge).set_mode_select(id(radio_mode_select));

# Volume control - automatically synced with radio
number:
  - platform: template
    name: "Radio Volume"
    id: radio_volume
    min_value: 0
    max_value: 255
    step: 1
    initial_value: 128
    set_action:
      - lambda: id(bridge).send_volume_command((int) x);
    on_value:
      # Register with bridge for automatic updates
      - lambda: id(bridge).set_volume_number(id(radio_volume));

  - platform: template
    name: "Radio Brightness"
    id: radio_brightness
    min_value: 0
    max_value: 255
    step: 1
    initial_value: 128
    set_action:
      - lambda: id(bridge).send_brightness_command((int) x);
    on_value:
      # Register with bridge for automatic updates
      - lambda: id(bridge).set_brightness_number(id(radio_brightness));

# Preset switches for quick station selection
switch:
  - platform: template
    name: "Preset 1 – Jazz"
    id: preset_1_switch
    turn_on_action:
      - lambda: id(bridge).send_mode_command(0, "radio", 1);
      - delay: 1s
      - switch.turn_off: preset_1_switch

  - platform: template
    name: "Preset 2 – Classical"
    id: preset_2_switch
    turn_on_action:
      - lambda: id(bridge).send_mode_command(0, "radio", 2);
      - delay: 1s
      - switch.turn_off: preset_2_switch

  - platform: template
    name: "Preset 3 – Rock"
    id: preset_3_switch
    turn_on_action:
      - lambda: id(bridge).send_mode_command(0, "radio", 3);
      - delay: 1s
      - switch.turn_off: preset_3_switch

# Display sensors - automatically updated by bridge
text_sensor:
  - platform: template
    name: "Radio Metadata"
    id: radio_metadata
    icon: "mdi:music-note"
    on_value:
      # Register with bridge for automatic updates
      - lambda: id(bridge).set_metadata_text_sensor(id(radio_metadata));

  - platform: template
    name: "Radio Current Mode"
    id: radio_current_mode
    icon: "mdi:radio"
    on_value:
      # Register with bridge for automatic updates
      - lambda: id(bridge).set_current_mode_text_sensor(id(radio_current_mode));

# State sensors - automatically updated by bridge
sensor:
  - platform: template
    name: "Radio Current Volume"
    id: radio_current_volume
    unit_of_measurement: ""
    icon: "mdi:volume-high"
    on_value:
      # Register with bridge for automatic updates
      - lambda: id(bridge).set_current_volume_sensor(id(radio_current_volume));

  - platform: template
    name: "Radio Current Brightness"
    id: radio_current_brightness
    unit_of_measurement: ""
    icon: "mdi:brightness-6"
    on_value:
      # Register with bridge for automatic updates
      - lambda: id(bridge).set_current_brightness_sensor(id(radio_current_brightness));
