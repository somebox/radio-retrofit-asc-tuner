external_components:
  - source:
      type: local
      path: ../components

esphome:
  name: retro-radio
  friendly_name: Retro Radio Bridge

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

uart:
  id: radio_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200

# Radio controller component - handles all state synchronization
radio_controller:
  id: bridge
  uart_id: radio_bus

# Basic mode selection
select:
  - platform: template
    name: "Radio Mode"
    id: radio_mode_select
    options: ["radio", "playlist", "clock", "animation"]
    initial_option: "radio"
    set_action:
      - lambda: |-
          int mode = (x == "radio") ? 0 : (x == "playlist") ? 1 : (x == "clock") ? 2 : 3;
          id(bridge).send_mode_command(mode, x);

# Volume control
number:
  - platform: template
    name: "Radio Volume"
    id: radio_volume
    min_value: 0
    max_value: 255
    step: 1
    initial_value: 128
    set_action:
      - lambda: id(bridge).send_volume_command((int) x);

# Basic preset switch for testing
switch:
  - platform: template
    name: "Preset 1 â€“ Jazz"
    id: preset_1_jazz
    turn_on_action:
      - lambda: id(bridge).send_mode_command(0, "radio", 1);
      - delay: 500ms
      - switch.turn_off: preset_1_jazz

# Display current metadata
text_sensor:
  - platform: template
    name: "Radio Metadata"
    id: radio_metadata
    icon: "mdi:music-note"

# Current state sensors
sensor:
  - platform: template
    name: "Radio Current Volume"
    id: radio_current_volume
    icon: "mdi:volume-high"