---
alwaysApply: true
---

We dont need to worry about backwards compatibility and breaking changes, this is a bespoke product. However, the components and modules we create may have value other projects and should be designed with that in mind.

Aim to write tests to cover code we create - especially calculations, string manipulations, parsing, state machines, and logic. We don't need to do comprehensive testing, but we should aim to cover the critical paths and edge cases.

We use the native test environment to check our application, and use the build in esp32-wrover environment to ensure we have a working firmware. The native tests will not be able to run arduino.h and hardware, so we should use mocks (like `test/support/mockTime.cpp`) to test our code.

We will use markdown documentation to work out complex ideas or refactorings. However, these are not considered documentation and should be deleted before merging. After completing a large feature, update the `doc/work-planning.md` to mark completed tasks, and update related documentation, including README.md.

Ensure documentation is always as concise and accurate as possible. Documentation must be factual and helpful, not promotional or overly verbose. 